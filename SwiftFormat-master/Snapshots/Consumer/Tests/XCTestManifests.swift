#if !canImport(ObjectiveC)
import XCTest

extension CompilerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompilerTests = [
        ("testAny", testAny),
        ("testAnyOptionals", testAnyOptionals),
        ("testCodePoint", testCodePoint),
        ("testDiscardAnyOptionals", testDiscardAnyOptionals),
        ("testDiscardEmptyAny", testDiscardEmptyAny),
        ("testDiscardEmptySequence", testDiscardEmptySequence),
        ("testDiscardOneOrMoreOptionals", testDiscardOneOrMoreOptionals),
        ("testDiscardOptional", testDiscardOptional),
        ("testDiscardSequenceOfOptionals", testDiscardSequenceOfOptionals),
        ("testEmptyAny", testEmptyAny),
        ("testEmptySequence", testEmptySequence),
        ("testFlattenAnyOptionals", testFlattenAnyOptionals),
        ("testFlattenEmptyAny", testFlattenEmptyAny),
        ("testFlattenEmptySequence", testFlattenEmptySequence),
        ("testFlattenOneOrMoreOptionals", testFlattenOneOrMoreOptionals),
        ("testFlattenOneOrMoreReplaceOptionals", testFlattenOneOrMoreReplaceOptionals),
        ("testFlattenSequenceOfOptionals", testFlattenSequenceOfOptionals),
        ("testOneOrMoreAnyOptionals", testOneOrMoreAnyOptionals),
        ("testOneOrMoreOptionals", testOneOrMoreOptionals),
        ("testOneOrMoreReplaceOptionals", testOneOrMoreReplaceOptionals),
        ("testOneOrMoreZeroOrMores", testOneOrMoreZeroOrMores),
        ("testReplaceOptional", testReplaceOptional),
        ("testSequence", testSequence),
        ("testSequenceOfOptionals", testSequenceOfOptionals),
        ("testString", testString),
        ("testZeroOrMore", testZeroOrMore),
    ]
}

extension ConsumerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConsumerTests = [
        ("testAnyDescription", testAnyDescription),
        ("testAnyNonOptionalIsNotOptional", testAnyNonOptionalIsNotOptional),
        ("testAnyOf", testAnyOf),
        ("testAnyOptionals", testAnyOptionals),
        ("testAnyWithOneOptionalIsOptional", testAnyWithOneOptionalIsOptional),
        ("testArrayLiteralConstructor", testArrayLiteralConstructor),
        ("testArrayLiteralConstructor2", testArrayLiteralConstructor2),
        ("testBestMatch", testBestMatch),
        ("testCharacter", testCharacter),
        ("testCharacterDescription", testCharacterDescription),
        ("testCharacterSet", testCharacterSet),
        ("testCharsetIsNotOptional", testCharsetIsNotOptional),
        ("testDiscardAnyOptionals", testDiscardAnyOptionals),
        ("testDiscardAnySequence", testDiscardAnySequence),
        ("testDiscardAnyString", testDiscardAnyString),
        ("testDiscardEmptyAny", testDiscardEmptyAny),
        ("testDiscardEmptySequence", testDiscardEmptySequence),
        ("testDiscardNonOptionalIsNotOptional", testDiscardNonOptionalIsNotOptional),
        ("testDiscardOneOrMoreOptionals", testDiscardOneOrMoreOptionals),
        ("testDiscardOptional", testDiscardOptional),
        ("testDiscardOptionalIsOptional", testDiscardOptionalIsOptional),
        ("testDiscardSequenceOfOptionals", testDiscardSequenceOfOptionals),
        ("testDiscardStringSequence", testDiscardStringSequence),
        ("testDiscardZeroOrMoreCharacters", testDiscardZeroOrMoreCharacters),
        ("testDiscardZeroOrMoreStrings", testDiscardZeroOrMoreStrings),
        ("testEmptyAny", testEmptyAny),
        ("testEmptyAnyIsOptional", testEmptyAnyIsOptional),
        ("testEmptyCharsetIsNotOptional", testEmptyCharsetIsNotOptional),
        ("testEmptyInput", testEmptyInput),
        ("testEmptySequence", testEmptySequence),
        ("testEmptySequenceIsOptional", testEmptySequenceIsOptional),
        ("testEmptyStringIsOptional", testEmptyStringIsOptional),
        ("testFlattenAnyOptionals", testFlattenAnyOptionals),
        ("testFlattenAnySequence", testFlattenAnySequence),
        ("testFlattenAnyString", testFlattenAnyString),
        ("testFlattenDiscardReplace", testFlattenDiscardReplace),
        ("testFlattenEmptyAny", testFlattenEmptyAny),
        ("testFlattenEmptySequence", testFlattenEmptySequence),
        ("testFlattenNonOptionalIsNotOptional", testFlattenNonOptionalIsNotOptional),
        ("testFlattenOneOrMoreOptionals", testFlattenOneOrMoreOptionals),
        ("testFlattenOneOrMoreReplaceOptionals", testFlattenOneOrMoreReplaceOptionals),
        ("testFlattenOptional", testFlattenOptional),
        ("testFlattenOptionalIsOptional", testFlattenOptionalIsOptional),
        ("testFlattenSequenceOfOptionals", testFlattenSequenceOfOptionals),
        ("testFlattenStringSequence", testFlattenStringSequence),
        ("testFlattenZeroOrMoreCharacters", testFlattenZeroOrMoreCharacters),
        ("testFlattenZeroOrMoreStrings", testFlattenZeroOrMoreStrings),
        ("testIgnoreInOneOrMoreAndOptional", testIgnoreInOneOrMoreAndOptional),
        ("testIgnoreInSequenceAndAny", testIgnoreInSequenceAndAny),
        ("testInterleaved", testInterleaved),
        ("testInterleavedSequenceFollowedByOptionalSeparator", testInterleavedSequenceFollowedByOptionalSeparator),
        ("testLabelAndReferenceDescription", testLabelAndReferenceDescription),
        ("testLabelledListTransform", testLabelledListTransform),
        ("testLabelledStringTransform", testLabelledStringTransform),
        ("testLabelNonOptionalIsNotOptional", testLabelNonOptionalIsNotOptional),
        ("testLabelOptionalIsOptional", testLabelOptionalIsOptional),
        ("testNestedNodeDescription", testNestedNodeDescription),
        ("testNodeDescription", testNodeDescription),
        ("testNoIgnoreInFlatten", testNoIgnoreInFlatten),
        ("testNot", testNot),
        ("testNot2", testNot2),
        ("testOneOrMore", testOneOrMore),
        ("testOneOrMoreAnyOptionals", testOneOrMoreAnyOptionals),
        ("testOneOrMoreNonOptionalIsNotOptional", testOneOrMoreNonOptionalIsNotOptional),
        ("testOneOrMoreOptionalIsOptional", testOneOrMoreOptionalIsOptional),
        ("testOneOrMoreOptionals", testOneOrMoreOptionals),
        ("testOneOrMoreReplaceOptionals", testOneOrMoreReplaceOptionals),
        ("testOneOrMoreZeroOrMores", testOneOrMoreZeroOrMores),
        ("testOptional", testOptional),
        ("testOptional2", testOptional2),
        ("testOptionalAndZeroOrMore", testOptionalAndZeroOrMore),
        ("testOptionalIsOptional", testOptionalIsOptional),
        ("testOrOperator", testOrOperator),
        ("testOrOperator2", testOrOperator2),
        ("testOrOperator3", testOrOperator3),
        ("testOrOperator4", testOrOperator4),
        ("testOrOperator5", testOrOperator5),
        ("testOrOperator6", testOrOperator6),
        ("testOrOperator7", testOrOperator7),
        ("testOrOperator8", testOrOperator8),
        ("testReferenceNonOptionalIsNotOptional", testReferenceNonOptionalIsNotOptional),
        ("testReferenceOptionalIsOptional", testReferenceOptionalIsOptional),
        ("testReplaceNonOptionalIsNotOptional", testReplaceNonOptionalIsNotOptional),
        ("testReplaceOptional", testReplaceOptional),
        ("testReplaceOptionalIsOptional", testReplaceOptionalIsOptional),
        ("testReplaceSequence", testReplaceSequence),
        ("testSequence", testSequence),
        ("testSequenceDescription", testSequenceDescription),
        ("testSequenceOfOptionals", testSequenceOfOptionals),
        ("testSequenceWithAllOptionalIsOptional", testSequenceWithAllOptionalIsOptional),
        ("testSequenceWithOneIsOptionalIsNotOptional", testSequenceWithOneIsOptionalIsNotOptional),
        ("testString", testString),
        ("testStringDescription", testStringDescription),
        ("testStringIsNotOptional", testStringIsNotOptional),
        ("testStringLiteralConstructor", testStringLiteralConstructor),
        ("testStringTransform", testStringTransform),
        ("testTokenDescription", testTokenDescription),
        ("testUnexpectedToken", testUnexpectedToken),
        ("testUnmatchedInput", testUnmatchedInput),
        ("testUnterminatedSequence", testUnterminatedSequence),
        ("testZeroOrMore", testZeroOrMore),
        ("testZeroOrMore2", testZeroOrMore2),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CompilerTests.__allTests__CompilerTests),
        testCase(ConsumerTests.__allTests__ConsumerTests),
    ]
}
#endif
